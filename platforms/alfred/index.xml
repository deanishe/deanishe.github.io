<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alfred on deanishe.net</title>
    <link>https://www.deanishe.net/platforms/alfred/</link>
    <description>Recent content in Alfred on deanishe.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Wed, 26 Oct 2022 11:41:07 +0200</lastBuildDate>
    <atom:link href="https://www.deanishe.net/platforms/alfred/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Workflow: Word to PDF</title>
      <link>https://www.deanishe.net/post/2021/05/workflow-word-to-pdf/</link>
      <pubDate>Wed, 05 May 2021 18:25:00 +0200</pubDate>
      <guid>https://www.deanishe.net/post/2021/05/workflow-word-to-pdf/</guid>
      <description>&lt;p&gt;An Alfred 4+ workflow to export Word documents to PDF. Uses Microsoft Word for the best possible conversion.&lt;/p&gt;
&lt;p&gt;The workflow can be run via its &lt;strong&gt;Export as PDF&lt;/strong&gt; File Action or by searching for a Word document to convert with the keyword &lt;code&gt;word2pdf&lt;/code&gt;. It can either use macOS&#39;s built-in ability to generate PDFs via the Print dialog (the default) or Word&#39;s built-in PDF export, which is based on a web service provided by Microsoft.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Download &lt;a href=&#34;Word%20to%20PDF.alfredworkflow&#34;&gt;Word to PDF.alfredworkflow&lt;/a&gt; and double-click to install.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;word2pdf &amp;lt;query&amp;gt;&lt;/code&gt; — Select a Word document to export.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;↩&lt;/code&gt; — Export to selected document to PDF.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Export as PDF&lt;/code&gt; — &lt;a href=&#34;https://www.alfredapp.com/help/features/actions/&#34;&gt;File Action&lt;/a&gt; to export selected files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File Buffer&lt;/code&gt; — Don&#39;t forget you can collect files in &lt;a href=&#34;https://www.alfredapp.com/help/features/file-search/#file-buffer&#34;&gt;Alfred&#39;s File Buffer&lt;/a&gt; and send them to the File Action all at once.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The workflow has two configuration settings:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;OPEN_WITH&lt;/code&gt; (optional)&lt;/dt&gt;
&lt;dd&gt;Set to the name of the application you&#39;d like to open the exported PDFs with. Default value is &lt;code&gt;Preview&lt;/code&gt;. Set to &lt;code&gt;Finder&lt;/code&gt; to reveal the PDFs in Finder. Clear the value to not open the PDFs.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;USE_ONLINE_SERVICE&lt;/code&gt; (optional)&lt;/dt&gt;
&lt;dd&gt;Set to &lt;code&gt;true&lt;/code&gt; to use Word&#39;s native PDF export (i.e. Microsoft&#39;s online service). This can be much faster and more reliable than UI scripting the Print dialog, but it has obvious privacy implications.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;This workflow was built for &lt;a href=&#34;https://www.alfredforum.com/topic/16844-converting-a-word-document-to-pdf-and-opening-in-a-program/&#34;&gt;this thread on the Alfred forum&lt;/a&gt;.&lt;/p&gt;</description>
    </item><item>
      <title>Sync macOS Shortcuts to Alfred Snippets</title>
      <link>https://www.deanishe.net/snippet/macos-shortcuts-to-alfred-snippets/</link>
      <pubDate>Mon, 22 Jun 2020 12:04:12 +0200</pubDate>
      <guid>https://www.deanishe.net/snippet/macos-shortcuts-to-alfred-snippets/</guid>
      <description>&lt;p&gt;Python script to sync macOS/iOS system shortcuts to an &lt;a href=&#34;https://www.alfredapp.com&#34;&gt;Alfred&lt;/a&gt; snippet collection.&lt;/p&gt;
&lt;p&gt;The script syncs your macOS shortcuts as defined in &amp;ldquo;System Preferences &amp;gt; Keyboard &amp;gt; Text&amp;rdquo; to an Alfred snippets collection.&lt;/p&gt;
&lt;p&gt;As the script syncs macOS snippets to Alfred, &lt;strong&gt;it will remove all other snippets&lt;/strong&gt;, so don&#39;t put anything else in that collection.&lt;/p&gt;
&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;
&lt;p&gt;To have your iOS snippets work properly on your Mac. macOS snippets don&#39;t work everywhere and aren&#39;t as simple to use as Alfred ones.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;You can run the script from wherever, but unless you run it from your Alfred snippets directory, you&#39;ll at least need to set the &lt;code&gt;SNIPPETS_DIR&lt;/code&gt; environent variable (see below), so Alfred sees the snippets.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The script has two options, set by environment variables:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;SNIPPET_DIR&lt;/code&gt; (default: &lt;code&gt;.&lt;/code&gt;)&lt;/dt&gt;
&lt;dd&gt;Directory your Alfred snippets are in. In most cases, this should be the path to the &lt;code&gt;snippets&lt;/code&gt; subdirectory of your &lt;code&gt;Alfred.alfredpreferences&lt;/code&gt; bundle. The default location (i.e. you aren&#39;t syncing your Alfred preferences) would be &lt;code&gt;~/Library/Application Support/Alfred/Alfred.alfredpreferences/snippets&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;COLLECTION_NAME&lt;/code&gt; (default: &lt;code&gt;macOS&lt;/code&gt;)&lt;/dt&gt;
&lt;dd&gt;Name of Alfred snippet collection to sync macOS shortcuts to&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The script will create Alfred snippets in directory &lt;code&gt;$SNIPPET_DIR/$COLLECTION_NAME&lt;/code&gt;.&lt;/p&gt;


  
  
&lt;div class=&#34;code&#34;&gt;
  &lt;header&gt;
    &lt;div class=&#34;filename&#34;&gt;shortcuts2alfred.py&lt;/div&gt;
    &lt;a class=&#34;rawlink&#34; href=&#34;shortcuts2alfred.py&#34;&gt;view raw&lt;/a&gt;
  &lt;/header&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;#!/usr/bin/python
# encoding: utf-8
#
# Copyright (c) 2020 Dean Jackson &amp;lt;deanishe@deanishe.net&amp;gt;
# MIT Licence. See http://opensource.org/licenses/MIT
#
# Created on 2020-06-22
#

&amp;#34;&amp;#34;&amp;#34;Convert macOS text shortcuts to Alfred snippets.&amp;#34;&amp;#34;&amp;#34;

from __future__ import print_function, absolute_import

from collections import namedtuple
import csv
from io import BytesIO
import json
import os
from os.path import expanduser, join, realpath
from subprocess import check_output
import sys


# directory to save snippets to
SNIPPET_DIR = os.getenv(&amp;#39;SNIPPET_DIR&amp;#39;) or &amp;#39;.&amp;#39;
COLLECTION_NAME = os.getenv(&amp;#39;COLLECTION_NAME&amp;#39;) or &amp;#39;macOS&amp;#39;


DBPATH = expanduser(&amp;#39;~/Library/KeyboardServices/TextReplacements.db&amp;#39;)
QUERY = &amp;#34;&amp;#34;&amp;#34;
select ZUNIQUENAME, ZSHORTCUT, ZPHRASE
    from ZTEXTREPLACEMENTENTRY
    where ZWASDELETED = 0;
&amp;#34;&amp;#34;&amp;#34;


Shortcut = namedtuple(&amp;#39;Shortcut&amp;#39;, &amp;#39;uid keyword snippet&amp;#39;)


def log(s, *args, **kwargs):
    &amp;#34;&amp;#34;&amp;#34;Log to STDERR.&amp;#34;&amp;#34;&amp;#34;
    if args:
        s = s % args
    elif kwargs:
        s = s % kwargs

    print(s, file=sys.stderr)


def load_shortcuts():
    &amp;#34;&amp;#34;&amp;#34;Read shortcuts from system SQLite database.&amp;#34;&amp;#34;&amp;#34;
    output = check_output([&amp;#39;/usr/bin/sqlite3&amp;#39;, &amp;#39;-csv&amp;#39;, DBPATH, QUERY])

    reader = csv.reader(BytesIO(output), delimiter=&amp;#39;,&amp;#39;, quotechar=&amp;#39;&amp;#34;&amp;#39;)
    shortcuts = []
    for row in reader:
        if len(row) == 3:
            sc = Shortcut(*[s.decode(&amp;#39;utf-8&amp;#39;) for s in row])
            if sc.keyword == sc.snippet:  # ignore do-nothing shortcuts
                continue
            shortcuts.append(sc)

    return shortcuts


def shortcut_to_snippet(shortcut):
    &amp;#34;&amp;#34;&amp;#34;Create Alfred snippet dict from macOS shortcut.&amp;#34;&amp;#34;&amp;#34;
    return {
        &amp;#39;alfredsnippet&amp;#39;: {
            &amp;#39;snippet&amp;#39;: shortcut.snippet,
            &amp;#39;uid&amp;#39;: shortcut.uid,
            &amp;#39;name&amp;#39;: shortcut.keyword,
            &amp;#39;keyword&amp;#39;: shortcut.keyword,
        }
    }


def safename(s):
    &amp;#34;&amp;#34;&amp;#34;Make filesystem-safe name.&amp;#34;&amp;#34;&amp;#34;
    for c in (&amp;#39;/&amp;#39;, &amp;#39;:&amp;#39;):
        s = s.replace(c, &amp;#39;-&amp;#39;)
    return s


def export_shortcuts(shortcuts, dirpath):
    &amp;#34;&amp;#34;&amp;#34;Save macOS shortcuts to directory as Alfred snippets.&amp;#34;&amp;#34;&amp;#34;
    log(&amp;#39;exporting snippets to %r ...&amp;#39;, dirpath)
    if not os.path.exists(dirpath):
        os.makedirs(dirpath, 0700)

    # remove existing snippets
    for name in os.listdir(dirpath):
        if name.endswith(&amp;#39;.json&amp;#39;):
            os.unlink(os.path.join(dirpath, name))

    for i, sc in enumerate(shortcuts):
        name = u&amp;#39;%s [%s].json&amp;#39; % (safename(sc.keyword), sc.uid)
        path = join(dirpath, name.encode(&amp;#39;utf-8&amp;#39;))
        log(&amp;#39;[%d/%d] saving snippet %r to %r ...&amp;#39;, i&amp;#43;1, len(shortcuts), sc.keyword, path)
        with open(path, &amp;#39;wb&amp;#39;) as fp:
            json.dump(shortcut_to_snippet(sc), fp, indent=2, separators=(&amp;#39;,&amp;#39;, &amp;#39;: &amp;#39;))


def main():
    &amp;#34;&amp;#34;&amp;#34;Run script.&amp;#34;&amp;#34;&amp;#34;
    shortcuts = load_shortcuts()
    log(&amp;#39;loaded %d macOS shortcut(s)&amp;#39;, len(shortcuts))
    dirpath = realpath(expanduser(join(SNIPPET_DIR, COLLECTION_NAME)))
    export_shortcuts(shortcuts, dirpath)


if __name__ == &amp;#39;__main__&amp;#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Inspired by &lt;a href=&#34;https://www.alfredforum.com/topic/15130-syncing-icloud-text-shortcuts-to-snippets/&#34;&gt;this thread on the Alfred forums&lt;/a&gt;.&lt;/p&gt;</description>
    </item><item>
      <title>Demo workflow: Random Images</title>
      <link>https://www.deanishe.net/post/2020/06/demo-workflow-random-images/</link>
      <pubDate>Sat, 13 Jun 2020 10:21:33 +0200</pubDate>
      <guid>https://www.deanishe.net/post/2020/06/demo-workflow-random-images/</guid>
      <description>&lt;p&gt;Simple workflow that opens a given number of random images at a given interval.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;randimg &amp;lt;interval&amp;gt; &amp;lt;count&amp;gt;&lt;/code&gt; — Show &lt;code&gt;&amp;lt;count&amp;gt;&lt;/code&gt; images at intervals of &lt;code&gt;&amp;lt;interval&amp;gt;&lt;/code&gt; seconds.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The workflow can be configured via its configuration sheet.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;APP_NAME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Preview&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Application to open images in&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IMAGE_DIR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/Pictures&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Directory to read images from&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PLAY_SOUND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Play a sound halfway through and at end&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If Preview is the chosen application, the images are opened in fullscreen mode.&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;https://www.alfredforum.com/topic/15077-get-random-image-from-folder-for-x-seconds/&#34;&gt;this forum thread&lt;/a&gt;.&lt;/p&gt;</description>
    </item><item>
      <title>Workflow: Video Conferences</title>
      <link>https://www.deanishe.net/post/2020/05/workflow-video-conferences/</link>
      <pubDate>Fri, 01 May 2020 12:06:23 +0200</pubDate>
      <guid>https://www.deanishe.net/post/2020/05/workflow-video-conferences/</guid>
      <description>&lt;p&gt;An Alfred 4+ workflow that shows upcoming calendar events that are video conferences, and opens the links to them. It supports Lync, Zoom, Microsoft Teams and Google Meet out of the box, but can be easily configured to support additional services.&lt;/p&gt;
&lt;p&gt;The workflow was inspired by &lt;a href=&#34;https://www.alfredforum.com/topic/12894-workflow-to-get-next-meeting-locationurl-and-open-it/&#34;&gt;this thread on the Alfred forum&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Download &lt;a href=&#34;Video%20Conferences.alfredworkflow&#34;&gt;Video Conferences.alfredworkflow&lt;/a&gt; and double-click to install.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You must grant the workflow/Alfred permission to access your calendars or it won&#39;t work. Obviously.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.vc [&amp;lt;query&amp;gt;]&lt;/code&gt; — Search upcoming video-conference events
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;↩&lt;/kbd&gt; — Open video-conference URL in your default browser&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;⌘↩&lt;/kbd&gt; — Show event in Calendar.app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vc reload&lt;/code&gt; — Force reload the cached list of events&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The workflow has a few knobs to turn in its configuration sheet.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;lookahead_days&lt;/code&gt; (default: &lt;code&gt;3&lt;/code&gt;)&lt;/dt&gt;
&lt;dd&gt;The number of days to fetch events for.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;max_cache_seconds&lt;/code&gt; (default: &lt;code&gt;300&lt;/code&gt;)&lt;/dt&gt;
&lt;dd&gt;How long (in seconds, obvs) to cache the list of events for. Fetching events is pretty slow, so adjust this to find the right compromise between speed and freshness. You can refresh the cached list of events at any time by entering the search query &amp;ldquo;reload&amp;rdquo;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;account_1&lt;/code&gt; (default: empty)&lt;/dt&gt;
&lt;dd&gt;Set &lt;code&gt;account_*&lt;/code&gt; variables to the names of accounts you&#39;d like to limit the search to. For example, if you only want to search your iCloud account, set &lt;code&gt;account_1&lt;/code&gt; to &lt;code&gt;iCloud&lt;/code&gt;. If you&#39;d also like to search your Nextcloud account, create another variable starting with &lt;code&gt;account_&lt;/code&gt; and set it to &lt;code&gt;Nextcloud&lt;/code&gt; etc.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;calendar_1&lt;/code&gt;, &lt;code&gt;calendar_2&lt;/code&gt; (default: empty)&lt;/dt&gt;
&lt;dd&gt;As with &lt;code&gt;account_*&lt;/code&gt; variables, you can use variables starting with &lt;code&gt;calendar_&lt;/code&gt; to restrict the search to only calendars whose names match the variables, e.g. if you&#39;ve set &lt;code&gt;calendar_1&lt;/code&gt; to &lt;code&gt;Work&lt;/code&gt;, only calendars named &amp;ldquo;Work&amp;rdquo; will be searched.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;regex_zoom&lt;/code&gt;, &lt;code&gt;regex_lync&lt;/code&gt; etc.&lt;/dt&gt;
&lt;dd&gt;Variables starting with &lt;code&gt;regex_&lt;/code&gt; are used to search for video conference URLs. There are currently regular expressions for Zoom, Lync and Google Meet. Add new variables starting with &lt;code&gt;regex_&lt;/code&gt; to add regular expressions that match the URLs of other services you&#39;d like to add.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;v0.1.4&lt;/strong&gt; (2021-06-17)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add regex for new Microsoft Teams URL format&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;v0.1.3&lt;/strong&gt; (2020-11-20)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add support for Microsoft Teams&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;v0.1.2&lt;/strong&gt; (2020-11-19)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Smarter date parsing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;v0.1.1&lt;/strong&gt; (2020-05-19)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Re-open workflow after force reload&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;v0.1.0&lt;/strong&gt; (2020-05-18)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fix Zoom regex to match meeting URLs without a password&lt;/li&gt;
&lt;li&gt;Shorten default cache period to 5 minutes&lt;/li&gt;
&lt;li&gt;Fix reload logic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;v0.0.3&lt;/strong&gt; (2020-05-16)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add additional Zoom regex&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;v0.0.2&lt;/strong&gt; (2020-05-04)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Show ongoing meetings&lt;/li&gt;
&lt;li&gt;Add support for Google Meet&lt;/li&gt;
&lt;li&gt;Event icons have the same colour as their calendars&lt;/li&gt;
&lt;li&gt;Add alternate action &lt;kbd&gt;⌘↩&lt;/kbd&gt; to show event in Calendar.app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;v0.0.1&lt;/strong&gt; (2020-05-02)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initial release&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item><item>
      <title>Demo workflow: Search engine List Filter</title>
      <link>https://www.deanishe.net/post/2019/07/demo-workflow-search-engine-list-filter/</link>
      <pubDate>Fri, 26 Jul 2019 21:00:00 +0200</pubDate>
      <guid>https://www.deanishe.net/post/2019/07/demo-workflow-search-engine-list-filter/</guid>
      <description>&lt;p&gt;Alfred workflow that allows you to choose from a list
of search engines, then enter the query to search for.&lt;/p&gt;
&lt;p&gt;It demonstrates the use of the &lt;a href=&#34;https://www.alfredapp.com/help/workflows/utilities/argument/&#34;&gt;Args &amp;amp; Vars utility&lt;/a&gt;
to capture more than one input from the user (by saving the first
to a workflow variable), and the &lt;a href=&#34;https://www.alfredapp.com/help/workflows/utilities/json/&#34;&gt;JSON utility&lt;/a&gt; to
dynamically configure an Open URL action to use the selected URL.&lt;/p&gt;
&lt;p&gt;The latter means that Alfred still takes care of URL-encoding the
search query for you.&lt;/p&gt;
&lt;p&gt;Based on &lt;a href=&#34;https://www.alfredforum.com/topic/13380-how-to-use-web-searches-in-a-list-filter/&#34;&gt;this forum thread&lt;/a&gt;.&lt;/p&gt;</description>
    </item><item>
      <title>Demo workflow: Directory size</title>
      <link>https://www.deanishe.net/post/2019/07/demo-workflow-directory-size/</link>
      <pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://www.deanishe.net/post/2019/07/demo-workflow-directory-size/</guid>
      <description>&lt;p&gt;Alfred workflow that shows the size of a directory.&lt;/p&gt;
&lt;p&gt;A specific directory can be specified in the workflow&#39;s
configuration sheet. Use keyword &lt;code&gt;dirsize&lt;/code&gt; to show the
size of this directory.&lt;/p&gt;
&lt;p&gt;There is also a &amp;ldquo;Show Size&amp;rdquo; File Action, which shows
the size of any directory.&lt;/p&gt;
&lt;p&gt;As the size of a directory is calculated on-the-fly, the
workflow can be slow on large directory trees.&lt;/p&gt;
&lt;p&gt;Under the hood, it uses &lt;code&gt;du -h -d 0&lt;/code&gt;.&lt;/p&gt;</description>
    </item><item>
      <title>Workflow: Search in App</title>
      <link>https://www.deanishe.net/post/2019/06/workflow-search-in-app/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.deanishe.net/post/2019/06/workflow-search-in-app/</guid>
      <description>&lt;p&gt;Alfred workflow to pass a query to an application&#39;s own search by simulating &lt;kbd&gt;⌘F&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;For applications that aren&#39;t scriptable via AppleScript or URL scheme, you can simulate keypresses to open an app&#39;s own search function and enter a query. This workflow is a relatively flexible implementation of that.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#downloads&#34;&gt;Download here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By default, the workflow puts your query on macOS&#39;s &lt;a href=&#34;#find-pasteboard&#34;&gt;Find Pasteboard&lt;/a&gt;, activates the target application, waits for it to be visible, and then simulates &lt;kbd&gt;⌘F&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;If the application doesn&#39;t support the Find Pasteboard, set &lt;code&gt;use_find_pasteboard&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; (see &lt;a href=&#34;#configuration&#34;&gt;below&lt;/a&gt;) and the workflow attempts to type the query into the search field instead.&lt;/p&gt;
&lt;p&gt;Finally, it simulates &lt;kbd&gt;↩&lt;/kbd&gt; (by default) to start the search.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Configure the workflow via its configuration sheet in Alfred Preferences:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;screenshot-setup.png&#34; alt=&#34;Workflow configuration sheet&#34; title=&#34;screenshot of Alfred&#39;s workflow configuration sheet&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;options&#34;&gt;Options&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;app_name&lt;/code&gt; is the name of the application you want to search in.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delay&lt;/code&gt; is how long (in seconds) the workflow waits for the app&#39;s search dialog to activate after sending &lt;kbd&gt;⌘F&lt;/kbd&gt; before it attempts to type the query or send &lt;kbd&gt;↩&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;press_return&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;, the workflow simulates &lt;kbd&gt;↩&lt;/kbd&gt; to start the search.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;timeout&lt;/code&gt; is how long (in seconds) the workflow waits for the application to become visible.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;use_find_pasteboard&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, the workflow puts the search query on macOS&#39;s &lt;a href=&#34;#find-pasteboard&#34;&gt;Find pasteboard&lt;/a&gt;. Otherwise, the workflow attempts to type the search query in the application&#39;s search field.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;wait_visible&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;, the workflow waits until the application is visible before simulating any keypresses.&lt;/p&gt;
&lt;h2 id=&#34;find-pasteboard&#34;&gt;Find Pasteboard&lt;/h2&gt;
&lt;p&gt;macOS has multiple pasteboards (clipboards), and one of these is called the Find Pasteboard (or Search Pasteboard). In applications that use macOS&#39;s native search, the Find Pasteboard is automatically used for the search query (including live updates). You can put the currently selected text on the Find Pasteboard with &lt;kbd&gt;⌘E&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;In Alfred 4+, the &lt;a href=&#34;https://www.alfredapp.com/help/workflows/triggers/hotkey/&#34; title=&#34;Alfred&#39;s help for Hotkey triggers&#34;&gt;Hotkey trigger&lt;/a&gt; can also pass the contents of the Find Pasteboard to your workflow.&lt;/p&gt;</description>
    </item><item>
      <title>Workflow: Vivaldi Bookmarks</title>
      <link>https://www.deanishe.net/post/2019/06/workflow-vivaldi-bookmarks/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.deanishe.net/post/2019/06/workflow-vivaldi-bookmarks/</guid>
      <description>&lt;p&gt;Build of &lt;a href=&#34;https://github.com/mdreizin&#34;&gt;@mdreizin&lt;/a&gt;&amp;lsquo;s &lt;a href=&#34;https://github.com/mdreizin/chrome-bookmarks-alfred-workflow&#34;&gt;Chromium bookmarks workflow&lt;/a&gt; for Alfred with support for &lt;a href=&#34;https://vivaldi.com/&#34;&gt;Vivaldi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.alfredforum.com/topic/12963-search-vivaldi-bookmarks/&#34;&gt;Workflow request on AlfredForum.com&lt;/a&gt;.&lt;/p&gt;</description>
    </item><item>
      <title>Workflow: Firefox Bookmarks</title>
      <link>https://www.deanishe.net/post/2019/06/workflow-firefox-bookmarks/</link>
      <pubDate>Sat, 08 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.deanishe.net/post/2019/06/workflow-firefox-bookmarks/</guid>
      <description>&lt;p&gt;Alfred 4+ workflow to search and open Firefox bookmarks.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;The workflow reads Firefox&#39;s bookmarks.html file, so first you must make sure that Firefox is configured to automatically export this file:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Browse to &lt;code&gt;about:config&lt;/code&gt; in Firefox&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;browser.bookmarks.autoExportHTML&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Restart Firefox to export the bookmarks.html file&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Firefox only updates the bookmarks.html file when it quits, so new bookmarks unfortunately aren&#39;t available in Alfred until you restart Firefox.&lt;/p&gt;
&lt;h3 id=&#34;profiles&#34;&gt;Profiles&lt;/h3&gt;
&lt;p&gt;By default, the workflow reads the bookmarks.html file for the default Firefox profile. If you wish to read a different profile&#39;s bookmarks, set &lt;code&gt;profile_name&lt;/code&gt; in the workflow&#39;s configuration sheet to the appropriate name, e.g. &lt;code&gt;dev-edition-default&lt;/code&gt;.&lt;/p&gt;</description>
    </item><item>
      <title>Workflow: New Directory With Selection</title>
      <link>https://www.deanishe.net/post/2019/06/workflow-new-directory-with-selection/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.deanishe.net/post/2019/06/workflow-new-directory-with-selection/</guid>
      <description>&lt;p&gt;Alfred 3+ workflow that implements a &amp;ldquo;New Dir With Selection&amp;rdquo; File Action.&lt;/p&gt;
&lt;p&gt;The File Action moves the selected files to a new folder. It should work with most applications you can select (local) files with, but all files must be in the same folder.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>