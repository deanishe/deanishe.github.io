<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>alfred on deanishe.net</title>
    <link>https://www.deanishe.net/tags/alfred/</link>
    <description>Recent content in alfred on deanishe.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Thu, 30 Sep 2021 09:38:40 +0200</lastBuildDate>
    <atom:link href="https://www.deanishe.net/tags/alfred/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Common Misspellings Snippets for Alfred</title>
      <link>https://www.deanishe.net/post/2021/04/common-misspellings-snippets-for-alfred/</link>
      <pubDate>Sat, 24 Apr 2021 22:06:01 +0200</pubDate>
      <guid>https://www.deanishe.net/post/2021/04/common-misspellings-snippets-for-alfred/</guid>
      <description>&lt;p&gt;Snippet collection for Alfred based on &lt;a href=&#34;https://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings&#34;&gt;Wikipedia&#39;s list of common misspellings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a snippet collection for Alfred 4+ to &amp;ldquo;autocorrect&amp;rdquo; &lt;a href=&#34;https://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings&#34;&gt;Wikipedia&#39;s list of common misspellings&lt;/a&gt;. Inspired by &lt;a href=&#34;https://www.alfredforum.com/topic/16806-automatic-spelling-correction-flummoxed-by-spell-chekced-yall/&#34;&gt;this forum thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Wikipedia list often contains multiple corrections for each misspelling. As a snippet can only contain one correction per misspelling, I&#39;ve had to remove all but one of the alternatives. Generally, I&#39;ve tried to pick the most common or obvious correction, and in the case of US and UK spellings, the British one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Many keywords are prefixes of other keywords, so auto-expansion won&#39;t work with this snippet collection. Alternatively, you can disable the duplicates, which Alfred will mark red if you turn on auto-expansion.&lt;/p&gt;</description>
    </item><item>
      <title>Sync macOS Shortcuts to Alfred Snippets</title>
      <link>https://www.deanishe.net/snippet/macos-shortcuts-to-alfred-snippets/</link>
      <pubDate>Mon, 22 Jun 2020 12:04:12 +0200</pubDate>
      <guid>https://www.deanishe.net/snippet/macos-shortcuts-to-alfred-snippets/</guid>
      <description>&lt;p&gt;Python script to sync macOS/iOS system shortcuts to an &lt;a href=&#34;https://www.alfredapp.com&#34;&gt;Alfred&lt;/a&gt; snippet collection.&lt;/p&gt;
&lt;p&gt;The script syncs your macOS shortcuts as defined in &amp;ldquo;System Preferences &amp;gt; Keyboard &amp;gt; Text&amp;rdquo; to an Alfred snippets collection.&lt;/p&gt;
&lt;p&gt;As the script syncs macOS snippets to Alfred, &lt;strong&gt;it will remove all other snippets&lt;/strong&gt;, so don&#39;t put anything else in that collection.&lt;/p&gt;
&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;
&lt;p&gt;To have your iOS snippets work properly on your Mac. macOS snippets don&#39;t work everywhere and aren&#39;t as simple to use as Alfred ones.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;You can run the script from wherever, but unless you run it from your Alfred snippets directory, you&#39;ll at least need to set the &lt;code&gt;SNIPPETS_DIR&lt;/code&gt; environent variable (see below), so Alfred sees the snippets.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The script has two options, set by environment variables:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;SNIPPET_DIR&lt;/code&gt; (default: &lt;code&gt;.&lt;/code&gt;)&lt;/dt&gt;
&lt;dd&gt;Directory your Alfred snippets are in. In most cases, this should be the path to the &lt;code&gt;snippets&lt;/code&gt; subdirectory of your &lt;code&gt;Alfred.alfredpreferences&lt;/code&gt; bundle. The default location (i.e. you aren&#39;t syncing your Alfred preferences) would be &lt;code&gt;~/Library/Application Support/Alfred/Alfred.alfredpreferences/snippets&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;COLLECTION_NAME&lt;/code&gt; (default: &lt;code&gt;macOS&lt;/code&gt;)&lt;/dt&gt;
&lt;dd&gt;Name of Alfred snippet collection to sync macOS shortcuts to&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The script will create Alfred snippets in directory &lt;code&gt;$SNIPPET_DIR/$COLLECTION_NAME&lt;/code&gt;.&lt;/p&gt;


  
  
&lt;div class=&#34;code&#34;&gt;
  &lt;header&gt;
    &lt;div class=&#34;filename&#34;&gt;shortcuts2alfred.py&lt;/div&gt;
    &lt;a class=&#34;rawlink&#34; href=&#34;shortcuts2alfred.py&#34;&gt;view raw&lt;/a&gt;
  &lt;/header&gt;
  &lt;pre&gt;&lt;code class=&#34;python&#34;&gt;#!/usr/bin/python
# encoding: utf-8
#
# Copyright (c) 2020 Dean Jackson &amp;lt;deanishe@deanishe.net&amp;gt;
# MIT Licence. See http://opensource.org/licenses/MIT
#
# Created on 2020-06-22
#

&amp;#34;&amp;#34;&amp;#34;Convert macOS text shortcuts to Alfred snippets.&amp;#34;&amp;#34;&amp;#34;

from __future__ import print_function, absolute_import

from collections import namedtuple
import csv
from io import BytesIO
import json
import os
from os.path import expanduser, join, realpath
from subprocess import check_output
import sys


# directory to save snippets to
SNIPPET_DIR = os.getenv(&amp;#39;SNIPPET_DIR&amp;#39;) or &amp;#39;.&amp;#39;
COLLECTION_NAME = os.getenv(&amp;#39;COLLECTION_NAME&amp;#39;) or &amp;#39;macOS&amp;#39;


DBPATH = expanduser(&amp;#39;~/Library/KeyboardServices/TextReplacements.db&amp;#39;)
QUERY = &amp;#34;&amp;#34;&amp;#34;
select ZUNIQUENAME, ZSHORTCUT, ZPHRASE
    from ZTEXTREPLACEMENTENTRY
    where ZWASDELETED = 0;
&amp;#34;&amp;#34;&amp;#34;


Shortcut = namedtuple(&amp;#39;Shortcut&amp;#39;, &amp;#39;uid keyword snippet&amp;#39;)


def log(s, *args, **kwargs):
    &amp;#34;&amp;#34;&amp;#34;Log to STDERR.&amp;#34;&amp;#34;&amp;#34;
    if args:
        s = s % args
    elif kwargs:
        s = s % kwargs

    print(s, file=sys.stderr)


def load_shortcuts():
    &amp;#34;&amp;#34;&amp;#34;Read shortcuts from system SQLite database.&amp;#34;&amp;#34;&amp;#34;
    output = check_output([&amp;#39;/usr/bin/sqlite3&amp;#39;, &amp;#39;-csv&amp;#39;, DBPATH, QUERY])

    reader = csv.reader(BytesIO(output), delimiter=&amp;#39;,&amp;#39;, quotechar=&amp;#39;&amp;#34;&amp;#39;)
    shortcuts = []
    for row in reader:
        if len(row) == 3:
            sc = Shortcut(*[s.decode(&amp;#39;utf-8&amp;#39;) for s in row])
            if sc.keyword == sc.snippet:  # ignore do-nothing shortcuts
                continue
            shortcuts.append(sc)

    return shortcuts


def shortcut_to_snippet(shortcut):
    &amp;#34;&amp;#34;&amp;#34;Create Alfred snippet dict from macOS shortcut.&amp;#34;&amp;#34;&amp;#34;
    return {
        &amp;#39;alfredsnippet&amp;#39;: {
            &amp;#39;snippet&amp;#39;: shortcut.snippet,
            &amp;#39;uid&amp;#39;: shortcut.uid,
            &amp;#39;name&amp;#39;: shortcut.keyword,
            &amp;#39;keyword&amp;#39;: shortcut.keyword,
        }
    }


def safename(s):
    &amp;#34;&amp;#34;&amp;#34;Make filesystem-safe name.&amp;#34;&amp;#34;&amp;#34;
    for c in (&amp;#39;/&amp;#39;, &amp;#39;:&amp;#39;):
        s = s.replace(c, &amp;#39;-&amp;#39;)
    return s


def export_shortcuts(shortcuts, dirpath):
    &amp;#34;&amp;#34;&amp;#34;Save macOS shortcuts to directory as Alfred snippets.&amp;#34;&amp;#34;&amp;#34;
    log(&amp;#39;exporting snippets to %r ...&amp;#39;, dirpath)
    if not os.path.exists(dirpath):
        os.makedirs(dirpath, 0700)

    # remove existing snippets
    for name in os.listdir(dirpath):
        if name.endswith(&amp;#39;.json&amp;#39;):
            os.unlink(os.path.join(dirpath, name))

    for i, sc in enumerate(shortcuts):
        name = u&amp;#39;%s [%s].json&amp;#39; % (safename(sc.keyword), sc.uid)
        path = join(dirpath, name.encode(&amp;#39;utf-8&amp;#39;))
        log(&amp;#39;[%d/%d] saving snippet %r to %r ...&amp;#39;, i&amp;#43;1, len(shortcuts), sc.keyword, path)
        with open(path, &amp;#39;wb&amp;#39;) as fp:
            json.dump(shortcut_to_snippet(sc), fp, indent=2, separators=(&amp;#39;,&amp;#39;, &amp;#39;: &amp;#39;))


def main():
    &amp;#34;&amp;#34;&amp;#34;Run script.&amp;#34;&amp;#34;&amp;#34;
    shortcuts = load_shortcuts()
    log(&amp;#39;loaded %d macOS shortcut(s)&amp;#39;, len(shortcuts))
    dirpath = realpath(expanduser(join(SNIPPET_DIR, COLLECTION_NAME)))
    export_shortcuts(shortcuts, dirpath)


if __name__ == &amp;#39;__main__&amp;#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Inspired by &lt;a href=&#34;https://www.alfredforum.com/topic/15130-syncing-icloud-text-shortcuts-to-snippets/&#34;&gt;this thread on the Alfred forums&lt;/a&gt;.&lt;/p&gt;</description>
    </item><item>
      <title>Google Calendar for Alfred</title>
      <link>https://www.deanishe.net/alfred-gcal-workflow/</link>
      <pubDate>Sat, 11 Jan 2020 07:54:28 +0100</pubDate>
      <guid>https://www.deanishe.net/alfred-gcal-workflow/</guid>
      <description>&lt;div align=&#34;center&#34;&gt;
    &lt;img height=&#34;128&#34; width=&#34;128&#34; src=&#34;https://raw.githubusercontent.com/deanishe/alfred-gcal/master/icons/icon.png&#34;&gt;
&lt;/div&gt;
&lt;p&gt;View Google Calendar events in &lt;a href=&#34;https://alfredapp.com/&#34;&gt;Alfred&lt;/a&gt;. Supports multiple accounts.&lt;/p&gt;
&lt;!-- MarkdownTOC autolink=&#34;true&#34; bracket=&#34;round&#34; depth=&#34;3&#34; autoanchor=&#34;true&#34; --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#google-calendar-for-alfred&#34;&gt;Google Calendar for Alfred&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#download--installation&#34;&gt;Download &amp;amp; installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#usage&#34;&gt;Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#date-format&#34;&gt;Date format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-event-format&#34;&gt;Add event format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#licensing--thanks&#34;&gt;Licensing &amp;amp; thanks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#privacy&#34;&gt;Privacy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;
&lt;h2 id=&#34;download--installation&#34;&gt;&lt;a name=&#34;download--installation&#34;&gt;&lt;/a&gt;
Download &amp;amp; installation&lt;/h2&gt;
&lt;p&gt;Grab the workflow from &lt;a href=&#34;https://github.com/deanishe/alfred-gcal/releases/latest&#34;&gt;GitHub releases&lt;/a&gt;. Download the &lt;code&gt;Google-Calendar-View-X.X.alfredworkflow&lt;/code&gt; file and double-click it to install.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;&lt;a name=&#34;usage&#34;&gt;&lt;/a&gt;
Usage&lt;/h2&gt;
&lt;p&gt;When run, the workflow will open Google Calendar in your browser and ask for permission to access your calendars. If you do not grant permission, it won&#39;t work. The workflow requests permission to edit your calendars, as this is needed for the &amp;ldquo;Add New Event&amp;rdquo; feature (keyword &lt;code&gt;gnew&lt;/code&gt;). It does not otherwise alter your calendars or events in any way.&lt;/p&gt;
&lt;p&gt;You will also be prompted to activate some calendars (the workflow will show events from these calendars). You can alter the active calendars or add/remove Google accounts in the settings using keyword &lt;code&gt;gcalconf&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcal&lt;/code&gt; — Show upcoming events.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;query&amp;gt;&lt;/code&gt; — Filter list of events.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;↩&lt;/code&gt; — Open event in browser or day in workflow.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌘↩&lt;/code&gt; — Open event in Google Maps or Apple Maps (if event has a location).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⇧&lt;/code&gt; / &lt;code&gt;⌘Y&lt;/code&gt; — Quicklook event details.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;today&lt;/code&gt; / &lt;code&gt;tomorrow&lt;/code&gt; / &lt;code&gt;yesterday&lt;/code&gt; — Show events for the given day.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;query&amp;gt;&lt;/code&gt; / &lt;code&gt;↩&lt;/code&gt; / &lt;code&gt;⌘↩&lt;/code&gt; / &lt;code&gt;⇧&lt;/code&gt; / &lt;code&gt;⌘Y&lt;/code&gt; — As above.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gdate [&amp;lt;date&amp;gt;]&lt;/code&gt; — Show one or more dates. See below for query format.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;↩&lt;/code&gt; — Show events for the given day.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gnew [&amp;lt;query&amp;gt;]&lt;/code&gt; — Add a new event in the one of active calendars. (example: Some meeting at Office at 5pm with Ian)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;↩&lt;/code&gt; — Create event in selected calendar.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gcalconf [&amp;lt;query&amp;gt;]&lt;/code&gt; — Show workflow configuration.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Active Calendars…&lt;/code&gt; — Turn calendars on/off.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;↩&lt;/code&gt; — Toggle calendar on/off.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Add Account…&lt;/code&gt; — Add a Google account.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;↩&lt;/code&gt; — Open Google login in browser to authorise an account.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;your.email@gmail.com&lt;/code&gt; — Your logged in Google account(s).
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;↩&lt;/code&gt; — Remove account.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Open Locations in Google Maps/Apple Maps&lt;/code&gt; — Choose app to open event locations.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;↩&lt;/code&gt; — Toggle setting between Google Maps &amp;amp; Apple Maps.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Workflow is up to Date&lt;/code&gt; / &lt;code&gt;An Update is Available&lt;/code&gt; — Whether a newer version of the workflow is available.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;↩&lt;/code&gt; — Check for or install update.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Open Locations in XYZ&lt;/code&gt; — Open locations in Google Maps or Apple Maps.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;↩&lt;/code&gt; — Toggle between applications.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Open Documentation&lt;/code&gt; — Open this page in your brower.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Get Help&lt;/code&gt; — Visit &lt;a href=&#34;https://www.alfredforum.com/topic/11016-google-calendar-view/&#34;&gt;the thread for this workflow&lt;/a&gt; on &lt;a href=&#34;https://www.alfredforum.com/&#34;&gt;AlfredForum.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Report Issue&lt;/code&gt; — &lt;a href=&#34;https://github.com/deanishe/alfred-gcal/issues&#34;&gt;Open an issue&lt;/a&gt; on GitHub.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Clear Cached Calendars &amp;amp; Events&lt;/code&gt; — Remove cached lists of calendars and events.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name=&#34;date-format&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;date-format&#34;&gt;Date format&lt;/h3&gt;
&lt;p&gt;When viewing dates/events, you can specify and jump to a particular date using the following input format:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;YYYY-MM-DD&lt;/code&gt; — e.g. &lt;code&gt;2017-12-01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YYYYMMDD&lt;/code&gt; — e.g. &lt;code&gt;20180101&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[+|-]N[d|w]&lt;/code&gt; — e.g.:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;, &lt;code&gt;1d&lt;/code&gt; or &lt;code&gt;+1d&lt;/code&gt; for tomorrow&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-1&lt;/code&gt; or &lt;code&gt;-1d&lt;/code&gt; for yesterday&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3w&lt;/code&gt; for 21 days from now&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-4w&lt;/code&gt; for 4 weeks ago&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name=&#34;add-event-format&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;add-event-format&#34;&gt;Add event format&lt;/h3&gt;
&lt;p&gt;The &amp;ldquo;Add New Event&amp;rdquo; feature (keyword &lt;code&gt;gnew&lt;/code&gt;) creates an event using Google Calendar&#39;s natural language syntax. This doesn&#39;t appear to be properly documented anywhere, but it is pretty powerful. You can specify event title, location, time &amp;amp; duration and repetition. Some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Wash pants&lt;/code&gt; — creates an event titled &amp;ldquo;Wash pants&amp;rdquo; starting now using your default event duration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Clean pants party tomorrow&lt;/code&gt; — creates an all-day event for tomorrow title &amp;ldquo;Clean pants party&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Drink beer every day 2000-2200&lt;/code&gt; — creates an event titled &amp;ldquo;Drink beer&amp;rdquo; starting at 8pm, finishing at 10pm, and repeating every day.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;configuration&#34;&gt;&lt;a name=&#34;configuration&#34;&gt;&lt;/a&gt;
Configuration&lt;/h2&gt;
&lt;p&gt;There are a couple of options in the workflow&#39;s configuration sheet (the &lt;code&gt;[x]&lt;/code&gt; button in Alfred Preferences):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CALENDAR_APP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Name of application to open Google Calendar URLs (not map URLs) in. If blank, your default browser is used.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EVENT_CACHE_MINS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Number of minutes to cache event lists before updating from the server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SCHEDULE_DAYS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The number of days&amp;rsquo; events to show with the &lt;code&gt;gcal&lt;/code&gt; keyword.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;APPLE_MAPS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Set to &lt;code&gt;1&lt;/code&gt; to open map links in Apple Maps instead of Google Maps. This option can be toggled from within the workflow&#39;s configuration with keyword &lt;code&gt;gcalconf&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;licensing--thanks&#34;&gt;&lt;a name=&#34;licensing--thanks&#34;&gt;&lt;/a&gt;
Licensing &amp;amp; thanks&lt;/h2&gt;
&lt;p&gt;This workflow is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT Licence&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is heavily based on the &lt;a href=&#34;https://github.com/google/google-api-go-client&#34;&gt;Google API libraries for Go&lt;/a&gt; (&lt;a href=&#34;https://github.com/google/google-api-go-client/blob/master/LICENSE&#34;&gt;BSD 3-clause licence&lt;/a&gt;) and &lt;a href=&#34;https://github.com/deanishe/awgo&#34;&gt;AwGo&lt;/a&gt; libraries (&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;), and of course, &lt;a href=&#34;https://calendar.google.com/calendar/&#34;&gt;Google Calendar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The icons are from or based on &lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/&#34;&gt;Font Awesome&lt;/a&gt; and &lt;a href=&#34;https://erikflowers.github.io/weather-icons/&#34;&gt;Weather Icons&lt;/a&gt; (both &lt;a href=&#34;http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&amp;amp;id=OFL&#34;&gt;SIL&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/diffmike&#34;&gt;@diffmike&lt;/a&gt; for adding the &amp;ldquo;Add New Event&amp;rdquo; feature.&lt;/p&gt;
&lt;h2 id=&#34;privacy&#34;&gt;&lt;a name=&#34;privacy&#34;&gt;&lt;/a&gt;
Privacy&lt;/h2&gt;
&lt;p&gt;The data used and accessed by this workflow are stored exclusively on your own Mac. Nothing is shared with anyone. When you authorise this workflow to access your Google Calendars, the only person you are enabling to read that data is you.&lt;/p&gt;
&lt;!--more--&gt;</description>
    </item><item>
      <title>Copying Alfred&#39;s environment to your shell</title>
      <link>https://www.deanishe.net/snippet/create-alfred-environment/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://www.deanishe.net/snippet/create-alfred-environment/</guid>
      <description>&lt;p&gt;A simple script to create an Alfred-like environment in your shell
by extracting and exporting variables from info.plist.&lt;/p&gt;
&lt;p&gt;Alfred uses &lt;a href=&#34;https://www.alfredapp.com/help/workflows/script-environment-variables/&#34; title=&#34;Alfred&#39;s environment variables&#34;&gt;environment variables&lt;/a&gt; to pass some important
information to your workflow code, like the paths to the data and cache
directories.&lt;/p&gt;
&lt;p&gt;Source the following script in your shell and/or test runner to extract
Alfred workflow variables from &lt;code&gt;info.plist&lt;/code&gt;:&lt;/p&gt;


  
  
&lt;div class=&#34;code&#34;&gt;
  &lt;header&gt;
    &lt;div class=&#34;filename&#34;&gt;alfredenv.sh&lt;/div&gt;
    &lt;a class=&#34;rawlink&#34; href=&#34;alfredenv.sh&#34;&gt;view raw&lt;/a&gt;
  &lt;/header&gt;
  &lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# When sourced, creates an Alfred-like environment

# getvar &amp;lt;name&amp;gt; | Read a value from info.plist
getvar() {
    local v=&amp;#34;$1&amp;#34;
    /usr/libexec/PlistBuddy -c &amp;#34;Print :$v&amp;#34; info.plist
}

# Minimal workflow settings
export alfred_workflow_bundleid=$( getvar &amp;#34;bundleid&amp;#34; )
export alfred_workflow_name=$( getvar &amp;#34;name&amp;#34; )
# Required if you&amp;#39;re using AwGo&amp;#39;s built-in update mechanism
export alfred_workflow_version=$( getvar &amp;#34;version&amp;#34; )

# Check for new prefs.json file introduced in Alfred 4
if [[ -f &amp;#34;${HOME}/Library/Alfred/Application Support/prefs.json&amp;#34; ]]; then
    # Standard locations of Alfred 4&amp;#43; cache &amp;amp; data directories
    export alfred_workflow_cache=&amp;#34;${HOME}/Library/Caches/com.runningwithcrayons.Alfred/Workflow Data/${alfred_workflow_bundleid}&amp;#34;
    export alfred_workflow_data=&amp;#34;${HOME}/Library/Application Support/Alfred/Workflow Data/${alfred_workflow_bundleid}&amp;#34;
else
    # Assume Alfred 3
    export alfred_workflow_cache=&amp;#34;${HOME}/Library/Caches/com.runningwithcrayons.Alfred-3/Workflow Data/${alfred_workflow_bundleid}&amp;#34;
    export alfred_workflow_data=&amp;#34;${HOME}/Library/Application Support/Alfred 3/Workflow Data/${alfred_workflow_bundleid}&amp;#34;
    export alfred_version=&amp;#34;3.8&amp;#34;
fi

# Turn debugging on
# export alfred_debug=1

# If you want to extract workflow variables set in the workflow
# configuration sheet:
# export SCHEDULE_DAYS=$( getvar &amp;#34;variables:SCHEDULE_DAYS&amp;#34; )
# export EVENT_CACHE_MINS=$( getvar &amp;#34;variables:EVENT_CACHE_MINS&amp;#34; )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
    </item><item>
      <title>Workflow/environment variables in Alfred</title>
      <link>https://www.deanishe.net/post/2018/10/workflow/environment-variables-in-alfred/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://www.deanishe.net/post/2018/10/workflow/environment-variables-in-alfred/</guid>
      <description>&lt;p&gt;This is a brief look at how to get, set and save variables in code
(i.e. in Script Filters, Run Script Actions, etc.).&lt;/p&gt;
&lt;!-- MarkdownTOC autolink=&#34;true&#34; bracket=&#34;round&#34; levels=&#34;2,3,4,5&#34; autoanchor=&#34;true&#34; --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setting-variables&#34;&gt;Setting variables&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#from-run-script-actions&#34;&gt;From Run Script actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#from-script-filters&#34;&gt;From Script Filters&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#root-level-variables&#34;&gt;Root-level variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#item-level-variables&#34;&gt;Item-level variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modifier-level-variables&#34;&gt;Modifier-level variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-variables&#34;&gt;Using variables&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#bash&#34;&gt;bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#applescript&#34;&gt;AppleScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#javascript-jxa&#34;&gt;JavaScript (JXA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#php&#34;&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#saving-variables&#34;&gt;Saving variables&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#applescript-1&#34;&gt;AppleScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#javascript-jxa-1&#34;&gt;JavaScript (JXA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#alfred-3&#34;&gt;Alfred 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;
&lt;p&gt;&lt;a id=&#34;introduction&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In Alfred 2, you had one single variable to work with: the &lt;code&gt;{query}&lt;/code&gt;
macro. Alfred 3 added the ability to specify as many variables as you
want. &lt;a href=&#34;https://www.alfredapp.com/help/workflows/advanced/variables/&#34;&gt;Alfred&#39;s own help&lt;/a&gt; provides a great description of
working with variables in Alfred&#39;s own UI. I&#39;m going to look more
closely about getting and setting workflow/environment variables in
your own code within a workflow.&lt;/p&gt;
&lt;p&gt;First of all, it bears mentioning that all variables are strings. Sure,
you can set a variable to a number in JSON or an array, but when it
reaches your next script or one of Alfred&#39;s Filter Utilities, it will be
a string. If you set a variable to an array (e.g. &lt;code&gt;[1, 2, 3, &amp;quot;mach dat Mäh mal ei&amp;quot;]&lt;/code&gt;), Alfred will turn it into a single tab-delimited string
(&lt;code&gt;&amp;quot;1\t2\t3\tmach dat Mäh mal ei&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;setting-variables&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;setting-variables&#34;&gt;Setting variables&lt;/h2&gt;
&lt;p&gt;There are several ways to set variables. The most obvious ones are in
the &lt;a href=&#34;https://www.alfredapp.com/help/workflows/advanced/variables/#environment&#34;&gt;Workflow Environment Variables table&lt;/a&gt; in the
workflow configuration sheet and using the &lt;a href=&#34;https://www.alfredapp.com/help/workflows/utilities/argument/&#34;&gt;Arg and Vars
Utility&lt;/a&gt;. The configuration sheet is largely without
magic, but in an Args and Vars Utility, you can use variable expansion
macros: &lt;code&gt;{query}&lt;/code&gt; expands (as always) to the input (which may be a
user-entered query or the output from a previous element), and you can
use &lt;code&gt;{var:VARIABLE_NAME}&lt;/code&gt; macros for your own custom variables.  This
is described in detail in the above-mentioned Alfred help pages.&lt;/p&gt;
&lt;p&gt;More interestingly, you can also set variables via the output of your
scripts (i.e. dynamically) by emitting appropriate JSON. How you set
variables depends on whether you are using a Script Filter or a Run
Script action.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE: You must use the appropriate mechanism, or it won&#39;t work!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;from-run-script-actions&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;from-run-script-actions&#34;&gt;From Run Script actions&lt;/h3&gt;
&lt;p&gt;Let&#39;s say your script outputs a URL, e.g. &lt;a href=&#34;https://www.google.com&#34;&gt;https://www.google.com&lt;/a&gt;.
Normally you just do &lt;code&gt;print(&#39;https://www.google.com&#39;)&lt;/code&gt; (or &lt;code&gt;echo&lt;/code&gt; or
&lt;code&gt;puts&lt;/code&gt;) and that gets passed as the input to the next action. To also
pass variables, you instead emit JSON in a very specific format:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;alfredworkflow&amp;quot;: {
    &amp;quot;arg&amp;quot;: &amp;quot;https://www.google.com&amp;quot;,
    &amp;quot;variables&amp;quot;: {&amp;quot;browser&amp;quot;: &amp;quot;Google Chrome&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The root &lt;code&gt;alfredworkflow&lt;/code&gt; object is required. If it&#39;s missing, Alfred
won&#39;t parse the JSON, but will pass it as-is as input to the next
action (which can also be very useful). Your output (i.e. the next
Action&#39;s input/&lt;code&gt;{query}&lt;/code&gt;) goes in &lt;code&gt;arg&lt;/code&gt;, and any variables you wish to
set go in the &lt;code&gt;variables&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;from-script-filters&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;from-script-filters&#34;&gt;From Script Filters&lt;/h3&gt;
&lt;p&gt;You can also set workflow variables via Script Filter feedback at three
different levels: the &lt;strong&gt;root&lt;/strong&gt; level, the &lt;strong&gt;item&lt;/strong&gt; level and the
&lt;strong&gt;modifier&lt;/strong&gt; level. (&lt;strong&gt;Note&lt;/strong&gt;: This only applies to JSON feedback; XML
feedback is now deprecated and does not support the features described
here.)&lt;/p&gt;
&lt;p&gt;In each case, variables are set via a &lt;code&gt;variables&lt;/code&gt; object at the
appropriate level (feedback root, &lt;code&gt;item&lt;/code&gt; or &lt;code&gt;mod&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;root-level-variables&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;root-level-variables&#34;&gt;Root-level variables&lt;/h4&gt;
&lt;p&gt;Root-level variables are always passed to downstream elements
regardless of which item is actioned. They are also passed back to the
same Script Filter if you&#39;ve set &lt;code&gt;rerun&lt;/code&gt;, so you can use root-level
variables to implement a &lt;a href=&#34;https://www.alfredforum.com/topic/9718-progress-bar/&#34;&gt;progress bar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;browser&lt;/code&gt; is set to &lt;code&gt;Safari&lt;/code&gt; for all items:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;variables&amp;quot;: {&amp;quot;browser&amp;quot;: &amp;quot;Safari&amp;quot;},
 &amp;quot;items&amp;quot;: [{&amp;quot;title&amp;quot;: &amp;quot;Google&amp;quot;,
   &amp;quot;arg&amp;quot;: &amp;quot;https://www.google.com&amp;quot;}]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&#34;item-level-variables&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;item-level-variables&#34;&gt;Item-level variables&lt;/h4&gt;
&lt;p&gt;Item-level variables are only passed downstream when the item they&#39;re
set on is actioned, and they override root-level variables. Root-level
variables are also passed downstream when you action an item.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;browser&lt;/code&gt; is set to &lt;code&gt;Safari&lt;/code&gt; by default, but &lt;code&gt;Google Chrome&lt;/code&gt; for Reddit:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;variables&amp;quot;: {&amp;quot;browser&amp;quot;: &amp;quot;Safari&amp;quot;},
 &amp;quot;items&amp;quot;: [
   {&amp;quot;title&amp;quot;: &amp;quot;Google&amp;quot;,
     &amp;quot;arg&amp;quot;: &amp;quot;https://www.google.com&amp;quot;},
   {&amp;quot;title&amp;quot;: &amp;quot;Reddit&amp;quot;,
     &amp;quot;arg&amp;quot;: &amp;quot;https://reddit.com&amp;quot;,
     &amp;quot;variables&amp;quot;: {&amp;quot;browser&amp;quot;: &amp;quot;Google Chrome&amp;quot;}}]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&#34;modifier-level-variables&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;modifier-level-variables&#34;&gt;Modifier-level variables&lt;/h4&gt;
&lt;p&gt;Modifier-level variables are only passed downstream when the
corresponding &lt;code&gt;item&lt;/code&gt; is actioned with the appropriate modifier key
pressed. They &lt;strong&gt;replace&lt;/strong&gt; item-level variables (i.e. if a modifier sets
any variables, Alfred ignores any variables set on its parent &lt;code&gt;item&lt;/code&gt;)
and override root-level variables.&lt;/p&gt;
&lt;p&gt;As above, &lt;code&gt;browser&lt;/code&gt; is set to &lt;code&gt;Safari&lt;/code&gt; by default and &lt;code&gt;Google Chrome&lt;/code&gt;
for Reddit. But you can also pass &lt;code&gt;browser=Google Chrome&lt;/code&gt; for Google by
holding ⌘ when actioning it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;variables&amp;quot;: {&amp;quot;browser&amp;quot;: &amp;quot;Safari&amp;quot;},
 &amp;quot;items&amp;quot;: [
   {&amp;quot;title&amp;quot;: &amp;quot;Google&amp;quot;,
     &amp;quot;arg&amp;quot;: &amp;quot;https://www.google.com&amp;quot;,
     &amp;quot;mods&amp;quot;: {&amp;quot;cmd&amp;quot;: {&amp;quot;variables&amp;quot;: {&amp;quot;browser&amp;quot;: &amp;quot;Google Chrome&amp;quot;}}}},
   {&amp;quot;title&amp;quot;: &amp;quot;Reddit&amp;quot;,
     &amp;quot;arg&amp;quot;: &amp;quot;https://reddit.com&amp;quot;,
     &amp;quot;variables&amp;quot;: {&amp;quot;browser&amp;quot;: &amp;quot;Google Chrome&amp;quot;}}]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&#34;using-variables&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;using-variables&#34;&gt;Using variables&lt;/h2&gt;
&lt;p&gt;So you&#39;ve set a few variables, and now you want to use them. Within
Alfred elements like &lt;a href=&#34;https://www.alfredapp.com/help/workflows/utilities/argument/&#34;&gt;Arg and Vars&lt;/a&gt; or &lt;a href=&#34;https://www.alfredapp.com/help/workflows/utilities/filter/&#34;&gt;Filter&lt;/a&gt;
Utilities, you use the above-mentioned &lt;code&gt;{var:VARIABLE_NAME}&lt;/code&gt; macros.
Very simple.&lt;/p&gt;
&lt;p&gt;Where it gets a little more complicated is in your own code. First and
foremost, &lt;strong&gt;&lt;code&gt;{var:VARIABLE_NAME}&lt;/code&gt; macro expansion does not work in Run
Script actions, Script Filters or any other script boxes in Alfred.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When Alfred runs your code, it does not use &lt;code&gt;{var:...}&lt;/code&gt; macros, but
rather takes any workflow variables and sets them as environment
variables for your script. Using the above example again, Alfred would
pass &amp;ldquo;&lt;a href=&#34;https://www.google.com%22&#34;&gt;https://www.google.com&amp;quot;&lt;/a&gt; to my script as input (either via ARGV or
&lt;code&gt;{query}&lt;/code&gt; depending on the settings) and it would set the environment
variable &lt;code&gt;browser&lt;/code&gt; to &lt;code&gt;Safari&lt;/code&gt; or &lt;code&gt;Google Chrome&lt;/code&gt;. How you retrieve
environment variables depends on the language you&#39;re using.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;bash&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;bash&#34;&gt;bash&lt;/h3&gt;
&lt;p&gt;The variables are already in the global namespace. Just use &lt;code&gt;$browser&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;python&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;os.environ&lt;/code&gt; dictionary or &lt;code&gt;os.getenv(&#39;VARIABLE_NAME&#39;)&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
browser = os.environ[&#39;browser&#39;]

# Or
browser = os.getenv(&#39;browser&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&#34;applescript&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;applescript&#34;&gt;AppleScript&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;system attribute&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;set theBrowser to (system attribute &amp;quot;browser&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&#34;javascript-jxa&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;javascript-jxa&#34;&gt;JavaScript (JXA)&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;$.getenv()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ObjC.import(&#39;stdlib&#39;);
var browser = $.getenv(&#39;browser&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&#34;php&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;php&#34;&gt;PHP&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;getenv()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$browser = getenv(&#39;browser&#39;);

// Or
$browser = $_ENV[&#39;browser&#39;];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Please see &lt;a href=&#34;https://www.alfredforum.com/topic/9070-how-to-workflowenvironment-variables/?p=46151&#34;&gt;this comment by juliosecco&lt;/a&gt; on why you should
use &lt;code&gt;getenv()&lt;/code&gt; over &lt;code&gt;$_ENV&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;ruby&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;ruby&#34;&gt;Ruby&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;ENV&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;browser = ENV[&amp;quot;browser&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&#34;saving-variables&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;saving-variables&#34;&gt;Saving variables&lt;/h2&gt;
&lt;p&gt;Any variables you set in a running workflow are &lt;strong&gt;not&lt;/strong&gt; saved. They
exist as long as the workflow is running and then disappear. Any
Workflow Environment Variables will &amp;ldquo;reset&amp;rdquo; to their values in the
&lt;a href=&#34;https://www.alfredapp.com/help/workflows/advanced/variables/#environment&#34;&gt;workflow configuration sheet&lt;/a&gt; on the next run.&lt;/p&gt;
&lt;p&gt;Generally, this is what you want, but sometimes you want to save a
variable&#39;s value. For example, you might have an &lt;code&gt;API_KEY&lt;/code&gt; Workflow
Environment Variable in the configuration sheet. The user can enter
their API key for the service in the configuration sheet, but you&#39;d
also like to add the ability to set it from within your workflow, e.g.
with a &lt;code&gt;setapikey&lt;/code&gt; Keyword and corresponding Run Script action.&lt;/p&gt;
&lt;p&gt;As of version 3.6, Alfred provides the &lt;code&gt;set configuration&lt;/code&gt; and
&lt;code&gt;remove configuration&lt;/code&gt; AppleScript functions to manipulate the
variables set in the Workflow Configuration Sheet.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;applescript-1&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;applescript-1&#34;&gt;AppleScript&lt;/h3&gt;
&lt;p&gt;The following applies to  Alfred 4+. For Alfred 3, &lt;a href=&#34;#alfred-3&#34;&gt;see below&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;with exportable&lt;/code&gt; clause is optional. If not specified,
the variable defaults to &amp;ldquo;Don&#39;t Export&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;To set variable &lt;code&gt;browser&lt;/code&gt; to value &lt;code&gt;Safari&lt;/code&gt; in workflow
&lt;code&gt;net.deanishe.demo&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;tell application id &amp;quot;com.runningwithcrayons.Alfred&amp;quot; to set configuration &amp;quot;browser&amp;quot; to value &amp;quot;Safari&amp;quot; in workflow &amp;quot;net.deanishe.demo&amp;quot; with exportable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As Alfred exports the bundle ID of the running workflow to the
environment variable &lt;code&gt;alfred_workflow_bundleid&lt;/code&gt;, you can use this
instead of hard-coding the bundle ID:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;set bundleID to (system attribute &amp;quot;alfred_workflow_bundleid&amp;quot;)

tell application id &amp;quot;com.runningwithcrayons.Alfred&amp;quot;
    set configuration &amp;quot;browser&amp;quot; to value &amp;quot;Safari&amp;quot; in workflow bundleID with exportable
end tell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The corresponding call to remove a variable is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;tell application id &amp;quot;com.runningwithcrayons.Alfred&amp;quot; to remove configuration &amp;quot;browser&amp;quot; in workflow &amp;quot;net.deanishe.demo&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&#34;javascript-jxa-1&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;javascript-jxa-1&#34;&gt;JavaScript (JXA)&lt;/h3&gt;
&lt;p&gt;The following applies to  Alfred 4+. For Alfred 3, &lt;a href=&#34;#alfred-3&#34;&gt;see below&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The equivalents to the above in JXA JavaScript (again, the &lt;code&gt;exportable&lt;/code&gt;
variable is optional):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Application(&#39;com.runningwithcrayons.Alfred&#39;).setConfiguration(&#39;browser&#39;, {
    toValue: &#39;Safari&#39;,
    inWorkflow: &#39;net.deanishe.demo&#39;,
    exportable: true
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or using the &lt;code&gt;alfred_workflow_bundleid&lt;/code&gt; variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ObjC.import(&#39;stdlib&#39;);
Application(&#39;com.runningwithcrayons.Alfred&#39;).setConfiguration(&#39;browser&#39;, {
    toValue: &#39;Safari&#39;,
    inWorkflow: $.getenv(&#39;alfred_workflow_bundleid&#39;),
    exportable: true
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to remove a variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Application(&#39;com.runningwithcrayons.Alfred&#39;).removeConfiguration(&#39;browser&#39;, {
  inWorkflow: $.getenv(&#39;alfred_workflow_bundleid&#39;)
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&#34;alfred-3&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;alfred-3&#34;&gt;Alfred 3&lt;/h3&gt;
&lt;p&gt;If you&#39;re still using Alfred 3, call the application by name, not bundle ID.&lt;/p&gt;
&lt;p&gt;AppleScript:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;tell application &amp;quot;Alfred 3&amp;quot; to ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JXA:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Application(&#39;Alfred 3&#39;)...
&lt;/code&gt;&lt;/pre&gt;</description>
    </item><item>
      <title>Workflow build script for Alfred</title>
      <link>https://www.deanishe.net/snippet/workflow-build/</link>
      <pubDate>Sun, 25 Dec 2016 16:33:14 +0100</pubDate>
      <guid>https://www.deanishe.net/snippet/workflow-build/</guid>
      <description>&lt;p&gt;A script for building &lt;a href=&#34;https://www.alfredapp.com&#34;&gt;Alfred&lt;/a&gt; workflows. Focussed on Python-based workflows.&lt;/p&gt;
&lt;p&gt;Creates an &lt;code&gt;.alfredworkflow&lt;/code&gt; file from the contents of the specified
directory. The generated file&#39;s name is based on the workflow&#39;s name
and version extracted from &lt;code&gt;info.plist&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;workflow-build [options] &amp;lt;workflow-dir&amp;gt;

Build Alfred Workflows.

Compile contents of &amp;lt;workflow-dir&amp;gt; to a ZIP file (with extension
`.alfredworkflow`).

The name of the output file is generated from the workflow name,
which is extracted from the workflow&#39;s `info.plist`. If a `version`
file is contained within the workflow directory, it&#39;s contents
will be appended to the compiled workflow&#39;s filename.

Usage:
    workflow-build [-v|-q|-d] [-f] [-o &amp;lt;outputdir&amp;gt;] &amp;lt;workflow-dir&amp;gt;...
    workflow-build (-h|--version)

Options:
    -o, --output=&amp;lt;outputdir&amp;gt;    Directory to save workflow(s) to.
                                Default is current working directory.
    -f, --force                 Overwrite existing files.
    -h, --help                  Show this message and exit.
    -V, --version               Show version number and exit.
    -q, --quiet                 Only show errors and above.
    -v, --verbose               Show info messages and above.
    -d, --debug                 Show debug messages.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/deanishe/b16f018119ef3fe951af.js&#34;&gt;&lt;/script&gt;</description>
    </item><item>
      <title>Auto-swap day/night Alfred themes</title>
      <link>https://www.deanishe.net/snippet/auto-swap-alfred-theme/</link>
      <pubDate>Sun, 25 Dec 2016 16:32:05 +0100</pubDate>
      <guid>https://www.deanishe.net/snippet/auto-swap-alfred-theme/</guid>
      <description>&lt;p&gt;Swap Alfred theme at sunrise and sunset. Goes well with &lt;a href=&#34;https://justgetflux.com&#34;&gt;f.lux&lt;/a&gt;
and macOS&#39;s night mode.&lt;/p&gt;
&lt;p&gt;It uses &lt;a href=&#34;http://www.launchd.info&#34;&gt;launchd&lt;/a&gt; to call itself at sunrise and sunset (or
as soon thereafter as your machine boots/wakes), and tells
&lt;a href=&#34;https://www.alfredapp.com/&#34;&gt;Alfred&lt;/a&gt; to change its theme.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;toggle_alfred_theme.py [-v|-q] [-d|--dark &amp;lt;theme&amp;gt;] [-l|--light &amp;lt;theme&amp;gt;]

    **You must first edit this script (or the accompanying bash wrapper)
    to set your location!**

    These scripts (Python script and bash wrapper) live at:
    https://gist.github.com/deanishe/ce442c3a768adedc9c39

    Change Alfred&#39;s theme depending on whether it&#39;s dark outside. Theme
    is changed immediately when the script is run and the script will
    also call itself again at sunrise and sunset (via launchd) to change
    Alfred&#39;s theme. It&#39;s works well together with F.lux, which can
    switch to Yosemite&#39;s dark mode at sunset.

    Just run the script *once* with your preferred themes:

        python toggle_alfred_theme.py --dark &#39;Dark Theme&#39; --light &#39;Light Theme&#39;

    or if you&#39;re using the wrapper:

        toggle-alfred-theme.bash --dark &#39;Dark Theme&#39; --light &#39;Light Theme&#39;

    and it will ensure Alfred&#39;s theme is changed every day at sunrise
    and sunset.

    To change your preferred themes, just run the script again.

    Note: Because the script calls itself via launchd, if you move the
    script, it will stop working until you run it again.

Usage:

    toggle_alfred_theme.py (-h|--help)
    toggle_alfred_theme.py --timezones
    toggle_alfred_theme.py (-t|--times)
    toggle_alfred_theme.py [-n] [-v|-q] [--dark &amp;lt;theme&amp;gt;] [--light &amp;lt;theme&amp;gt;]

Options:
    -h, --help           Show this help message
    -n, --nothing        Show what would be set, but make no changes
    -t, --times          Show sunrise and sunset times for next 7 days
    --timezones          Show a list of (&amp;gt;500) supported timezones
    -l, --light &amp;lt;theme&amp;gt;  Alfred theme to use after sunrise
    -d, --dark &amp;lt;theme&amp;gt;   Alfred theme to use after sunset
    -v, --verbose        Show debugging info
    -q, --quiet          Only show warnings and errors

Installation &amp;amp; Setup:

    This script requires the `astral` and `pytz` libraries. Install with:

        pip install astral

    It&#39;s better to install them in the same directory as this script (or
    use a virtualenv), in order not to muck up your Python installation
    or break other software:

        pip install --target=/directory/where/this/script/is astral

    Adjust the settings at the top of this script in the CONFIG section
    (or in the bash wrapper) to match your location.

    `TZ_NAME` must be one of the timezones recognised by `pytz`. To see
    a list of all supported timezones, run this script with the
    --timezones option. (Note there are over 500 timezones.)

    You can usually find your town&#39;s latitude, longitude and elevation
    on its Wikipedia page.

How it works:

    When run, the script will immediately set Alfred&#39;s theme according
    to whether it&#39;s light or dark out, then tell OS X to run the script
    again at the next sunset/sunrise. Even if your computer is off/asleep
    when the script is supposed to run, it will be run immediately on
    boot/wake.

    Note: Yosemite has some issues with running LaunchAgents on wake. If
    the script isn&#39;t running when it&#39;s supposed to on Yosemite, but the
    script reports the correct times, it&#39;s a problem with Yosemite, not
    this script.

    The script has to fork into the background (i.e. exit successfully
    immediately) because `launchctl` doesn&#39;t like the script updating
    the Launch Agent while it&#39;s running it.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two files, the Python script and a bash wrapper. The wrapper&#39;s
only purpose is to store your configuration, so you can upgrade the
Python script without having to edit it again.&lt;/p&gt;
&lt;p&gt;You &lt;strong&gt;must&lt;/strong&gt; set your location in one of the scripts before usage.&lt;/p&gt;
&lt;p&gt;You can usually find the latitude, longitude and elevation of your town
on its Wikipedia page.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/deanishe/ce442c3a768adedc9c39.js&#34;&gt;&lt;/script&gt;</description>
    </item>
  </channel>
</rss>